import { generateQuestionHeader } from "../QuestionHeader.js";
import { generateFeedBack } from "../Feedback.js";
import {
  createElementWithClasses,
  generateID,
  getInputIndexById,
  responsesAreEqual,
} from "../../utils/index.js";
import { generateButtonEnviarResposta } from "../ButtonEnviarResposta.js";

function generateCompleteImageQuestion(question) {
  const { uid: questionId, alternatives, evaluation, correctAnswer } = question;
  const rootContainer = document.getElementById(question.uid);

  // root container not found
  if (!rootContainer) return;

  // header
  const header = generateQuestionHeader(question, question.assertive);
  rootContainer.appendChild(header);

  let counterRespostas = correctAnswer.length;
  let currentCounterRespostas = 0;
  let currentAnswer = {};
  let currentInput = 0; // o input do momento
  // Função para atualizar a variável de estado
  function setCurrentInput(newValue) {
    currentInput = newValue;
  }

  // vai mapear para array certinho
  function answerMapping(answerForm) {
    let lista = [];
    for (let i = 0; i < correctAnswer.length; i++) {
      const inputId = generateID(questionId, "IN", i);
      lista.push(answerForm[inputId]);
    }
    return lista;
  }

  function getEvaluations(evaluation, response, correctAnswer) {
    let feedbackResponse = [];
    let objeto = {};
    let responseCorrect = responsesAreEqual(response, correctAnswer); // ve se os arrays são iguais
    if (responseCorrect) {
      objeto = {
        isCorrect: true,
        feedback: evaluation.feedback.correct,
      };
      feedbackResponse.push(objeto);
    } else {
      objeto = {
        isCorrect: false,
        feedback: evaluation.feedback.incorrect,
      };
      feedbackResponse.push(objeto);
    }
    return feedbackResponse;
  }

  // devolve apenas os feedbacks das respostas
  function evaluateAssessment(response) {
    return getEvaluations(evaluation, response, correctAnswer);
  }

  function handleSubmit(e) {
    e.preventDefault();

    const formResponse = e.target;
    const formData = new FormData(formResponse);
    const submittedAnswer = Object.fromEntries(formData.entries());

    const response = answerMapping(submittedAnswer); // respostas em array

    /* Avaliar Respostas */
    const assessmentResults = evaluateAssessment(response);

    var eventFeedbacks = new CustomEvent("RecieveFeedbacks", {
      detail: assessmentResults,
    }); // evento que manda os feedbacks surgirem e muda as classes dos <input />
    const elements = rootContainer.getElementsByClassName(
      "class-feedbacks-remove"
    ); // pega todos os elementos feedback e remove antes de pedir para criar mais feedbacks
    for (var i = elements.length - 1; i >= 0; i--) {
      elements[i].remove();
    }
    rootContainer.dispatchEvent(eventFeedbacks);
  }

  const onRemove = (inputId) => {
    const updateAnswer = { ...currentAnswer, [inputId]: undefined };
    currentAnswer = updateAnswer;
    let div = document.getElementById(questionId); // faz o elemento ser escutado só na div pai da questão
    let evento = new CustomEvent("canSubmit", { detail: currentAnswer }); // para "mudar o current answer na outra tela para o botão ser desativado, mando ele para outra tela sempre ao mudar os inputs"
    div.dispatchEvent(evento);
  };

  function onSelect(inputId, alternative) {
    const updateAnswer = { ...currentAnswer, [inputId]: alternative };
    // Atualizando o currentAnswer com a nova resposta
    currentAnswer = updateAnswer;
    let div = document.getElementById(questionId);
    let evento = new CustomEvent("canSubmit", { detail: currentAnswer });
    div.dispatchEvent(evento);
  }

  // ao clicar no input
  const onRemoveAlternative = (inputId) => {
    let inputNow = document.getElementById(inputId);
    inputNow.value = ""; // apago o que há no input
    setCurrentInput(getInputIndexById(inputId));
    onRemove(inputId);
    alternatives.map((alternative, _) => {
      let button = document.getElementById(alternative);
      let evento = new CustomEvent("disableButton", { detail: currentAnswer }); // lanço evento pra todos botões verificarem se eles devem estar disable ou não
      button.dispatchEvent(evento);
    });
  };

  // ao clicar no botão (alternativa)
  const onSelectAlternative = (alternative) => {
    const inputId = generateID(questionId, "IN", currentInput); //  vai pegar o id do input que está no momento

    // aqui faz mostrar no input
    let inputNow = document.getElementById(inputId);
    inputNow.value = alternative;

    setCurrentInput((currentInput + 1) % correctAnswer.length); //current input vai ser tal agora (ao clicar ele muda)

    onSelect(inputId, alternative);
    alternatives.map((alternative, _) => {
      let button = document.getElementById(alternative);
      let evento = new CustomEvent("disableButton", { detail: currentAnswer }); // lanço evento pra todos botões
      button.dispatchEvent(evento);
    });
  };

  // função pra escolher a grid dos botões
  const alternativesGridColSizeFunction = () => {
    if (alternatives.length <= 5) return alternatives.length;

    const gridColOptions = [3, 4, 5];
    let result = 2;

    for (const option of gridColOptions) {
      if (alternatives.length % option === 0) {
        result = option;
        break;
      }
    }
    return result;
  };

  const alternativesGridColSize = alternativesGridColSizeFunction();

  const inputId0 = generateID(questionId, "IN", 0);
  const inputId1 = generateID(questionId, "IN", 1);
  const inputId2 = generateID(questionId, "IN", 2);

  const form = createElementWithClasses("form", "flex flex-col gap-2");
  form.addEventListener("submit", handleSubmit);
  rootContainer.appendChild(form);

  const div1 = createElementWithClasses("div", "w-full bg-secondary-950 py-8");
  form.appendChild(div1);

  const div2 = createElementWithClasses(
    "div",
    "p-2 border-dashed border-2 rounded-md w-80 m-auto border-gray-4000"
  );
  div1.appendChild(div2);

  const div3 = createElementWithClasses(
    "div",
    "py-4 px-2 bg-gradient-complete-image flex flex-col items-center justify-center gap-2 border-2 rounded-md border-white"
  );
  div2.appendChild(div3);

  const strong = document.createElement("strong");
  strong.innerHTML = "Bloco 1";
  div3.appendChild(strong);

  const input0 = createElementWithClasses(
    "input",
    "w-full h-10 bg-[#EBEEF7] border border-[#062680] outline-none text-secondary-300 text-center"
  );
  input0.id = inputId0;
  input0.name = inputId0;
  input0.value = "";
  input0.readOnly = true;
  input0.addEventListener("click", () => onRemoveAlternative(inputId0));
  div3.appendChild(input0);

  const span1 = createElementWithClasses(
    "span",
    "w-full h-10 bg-[#EBEEF7] font-normal flex items-center justify-center"
  );
  span1.innerHTML = "15:40 10/08/2018";
  div3.appendChild(span1);

  const span2 = createElementWithClasses(
    "span",
    "w-full h-10 bg-[#EBEEF7] font-normal flex items-center justify-center"
  );
  span2.innerHTML = "7224";
  div3.appendChild(span2);

  const span3 = createElementWithClasses(
    "span",
    "w-full bg-[#EBEEF7] font-normal flex flex-col items-center justify-center gap-1 py-2"
  );

  // CodeVector
  //// the svg icon
  const svgIcon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  svgIcon.setAttribute("xmlns", "http://www.w3.org/2000/svg");
  svgIcon.setAttribute("viewBox", "0 0 211 92");
  svgIcon.setAttribute("fill", "none");
  svgIcon.setAttribute("width", "211");
  svgIcon.setAttribute("height", "92");
  span3.appendChild(svgIcon);
  div3.appendChild(span3);

  function creatingPaths(d) {
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", d);
    path.setAttribute("fill", "#404040");
    svgIcon.appendChild(path);
  }
  creatingPaths(
    "M65.8898 9.84351V0.390264H69.084C69.8225 0.390264 70.4288 0.51643 70.9026 0.768763C71.3765 1.01802 71.7273 1.36113 71.9551 1.7981C72.1828 2.23506 72.2966 2.73203 72.2966 3.28901C72.2966 3.84599 72.1828 4.33989 71.9551 4.7707C71.7273 5.20151 71.3781 5.54 70.9073 5.78618C70.4364 6.02928 69.8349 6.15083 69.1025 6.15083H66.5176V5.11688H69.0655C69.5702 5.11688 69.9764 5.04303 70.2841 4.89532C70.5949 4.74762 70.8196 4.53837 70.958 4.26757C71.0996 3.9937 71.1704 3.66751 71.1704 3.28901C71.1704 2.91051 71.0996 2.57971 70.958 2.29661C70.8165 2.0135 70.5903 1.79502 70.2795 1.64116C69.9687 1.48422 69.5579 1.40575 69.0471 1.40575H67.0346V9.84351H65.8898ZM70.3395 5.59693L72.6659 9.84351H71.3365L69.0471 5.59693H70.3395ZM76.1428 10.0097C75.6935 10.0097 75.2858 9.92505 74.9196 9.7558C74.5534 9.58348 74.2626 9.33576 74.0472 9.01265C73.8318 8.68647 73.7241 8.29258 73.7241 7.831C73.7241 7.42481 73.8041 7.09554 73.9641 6.84321C74.1241 6.5878 74.338 6.38778 74.6057 6.24315C74.8734 6.09852 75.1688 5.99082 75.4919 5.92004C75.8181 5.84619 76.1459 5.78772 76.4751 5.74464C76.9059 5.68925 77.2552 5.64771 77.5229 5.62001C77.7937 5.58924 77.9907 5.53847 78.1137 5.46769C78.2399 5.39691 78.303 5.27382 78.303 5.09842V5.06149C78.303 4.60607 78.1784 4.25218 77.9291 3.99985C77.6829 3.74752 77.3091 3.62135 76.8075 3.62135C76.2874 3.62135 75.8797 3.73521 75.5843 3.96292C75.2889 4.19064 75.0811 4.43374 74.9611 4.69223L73.9272 4.32296C74.1118 3.89215 74.358 3.55673 74.6657 3.31671C74.9765 3.07361 75.315 2.90436 75.6812 2.80896C76.0505 2.71049 76.4136 2.66126 76.7705 2.66126C76.9983 2.66126 77.2598 2.68895 77.5552 2.74434C77.8537 2.79666 78.1414 2.9059 78.4184 3.07207C78.6984 3.23824 78.9307 3.48903 79.1154 3.82445C79.3 4.15987 79.3923 4.60914 79.3923 5.17228V9.84351H78.303V8.88341H78.2476C78.1738 9.03727 78.0507 9.2019 77.8783 9.37731C77.706 9.55271 77.4768 9.70195 77.1906 9.82504C76.9044 9.94813 76.5551 10.0097 76.1428 10.0097ZM76.309 9.03112C76.7398 9.03112 77.1029 8.94649 77.3983 8.77725C77.6968 8.608 77.9214 8.38952 78.0722 8.1218C78.2261 7.85408 78.303 7.57251 78.303 7.2771V6.28008C78.2568 6.33547 78.1553 6.38624 77.9983 6.4324C77.8445 6.47548 77.666 6.51395 77.4629 6.5478C77.2629 6.57857 77.0675 6.60626 76.8767 6.63088C76.689 6.65242 76.5367 6.67088 76.4197 6.68627C76.1366 6.7232 75.872 6.7832 75.6258 6.86629C75.3827 6.9463 75.1858 7.06785 75.035 7.23094C74.8873 7.39096 74.8134 7.60944 74.8134 7.88639C74.8134 8.26489 74.9534 8.55107 75.2335 8.74494C75.5166 8.93572 75.8751 9.03112 76.309 9.03112ZM81.3806 9.84351V2.75357H82.4699V9.84351H81.3806ZM81.9345 1.57192C81.7222 1.57192 81.5391 1.4996 81.3852 1.35497C81.2344 1.21035 81.159 1.03648 81.159 0.833385C81.159 0.630288 81.2344 0.456425 81.3852 0.311795C81.5391 0.167165 81.7222 0.0948505 81.9345 0.0948505C82.1468 0.0948505 82.3284 0.167165 82.4792 0.311795C82.633 0.456425 82.71 0.630288 82.71 0.833385C82.71 1.03648 82.633 1.21035 82.4792 1.35497C82.3284 1.4996 82.1468 1.57192 81.9345 1.57192ZM84.262 9.84351V9.01265L88.2871 3.84291V3.76906H84.3913V2.75357H89.6903V3.62135L85.776 8.75417V8.82802H89.8195V9.84351H84.262ZM97.8303 9.99121C97.2395 9.99121 96.7179 9.84197 96.2655 9.54348C95.8132 9.24191 95.4593 8.81725 95.2039 8.2695C94.9485 7.71868 94.8208 7.06785 94.8208 6.317C94.8208 5.57231 94.9485 4.9261 95.2039 4.37835C95.4593 3.8306 95.8147 3.40749 96.2702 3.10899C96.7256 2.8105 97.2518 2.66126 97.8488 2.66126C98.3104 2.66126 98.675 2.73819 98.9427 2.89205C99.2135 3.04283 99.4197 3.21516 99.5612 3.40902C99.7059 3.59981 99.8182 3.75675 99.8982 3.87984H99.9905V0.390264H101.08V9.84351H100.027V8.75417H99.8982C99.8182 8.88341 99.7043 9.0465 99.5566 9.24345C99.4089 9.43731 99.1981 9.61118 98.9243 9.76504C98.6504 9.91582 98.2857 9.99121 97.8303 9.99121ZM97.978 9.01265C98.415 9.01265 98.7842 8.8988 99.0858 8.67108C99.3874 8.44029 99.6166 8.1218 99.7736 7.7156C99.9305 7.30633 100.009 6.83398 100.009 6.29854C100.009 5.76926 99.9321 5.30613 99.7782 4.90917C99.6243 4.50913 99.3966 4.19833 99.095 3.97677C98.7935 3.75213 98.4211 3.63982 97.978 3.63982C97.5164 3.63982 97.1318 3.75829 96.8241 3.99524C96.5194 4.2291 96.2902 4.5476 96.1363 4.95071C95.9855 5.35075 95.9101 5.80003 95.9101 6.29854C95.9101 6.80321 95.987 7.26171 96.1409 7.67406C96.2978 8.08333 96.5286 8.40952 96.8333 8.65262C97.141 8.89264 97.5226 9.01265 97.978 9.01265ZM106.199 9.99121C105.516 9.99121 104.926 9.84043 104.431 9.53886C103.939 9.23421 103.559 8.80956 103.291 8.26489C103.026 7.71714 102.894 7.08016 102.894 6.35393C102.894 5.6277 103.026 4.98764 103.291 4.43374C103.559 3.87676 103.931 3.44287 104.408 3.13207C104.888 2.8182 105.448 2.66126 106.088 2.66126C106.457 2.66126 106.822 2.7228 107.182 2.84589C107.542 2.96898 107.87 3.169 108.165 3.44595C108.461 3.71982 108.696 4.08294 108.871 4.53529C109.047 4.98764 109.134 5.54462 109.134 6.20622V6.66781H103.669V5.72618H108.027C108.027 5.32614 107.947 4.96918 107.787 4.6553C107.63 4.34142 107.405 4.09371 107.113 3.91215C106.824 3.73059 106.482 3.63982 106.088 3.63982C105.654 3.63982 105.279 3.74752 104.962 3.96292C104.648 4.17525 104.406 4.4522 104.237 4.79378C104.068 5.13535 103.983 5.50154 103.983 5.89235V6.5201C103.983 7.05554 104.076 7.50943 104.26 7.88177C104.448 8.25104 104.708 8.53261 105.04 8.72647C105.373 8.91726 105.759 9.01265 106.199 9.01265C106.485 9.01265 106.743 8.97265 106.974 8.89264C107.208 8.80956 107.41 8.68647 107.579 8.52338C107.748 8.35721 107.879 8.15103 107.971 7.90485L109.024 8.20027C108.913 8.55722 108.727 8.8711 108.465 9.1419C108.204 9.40962 107.881 9.61887 107.496 9.76965C107.111 9.91736 106.679 9.99121 106.199 9.99121ZM114.595 0.390264H115.961L119.174 8.23719H119.285L122.497 0.390264H123.864V9.84351H122.793V2.66126H122.7L119.746 9.84351H118.712L115.758 2.66126H115.666V9.84351H114.595V0.390264ZM128.984 9.99121C128.301 9.99121 127.711 9.84043 127.216 9.53886C126.724 9.23421 126.344 8.80956 126.076 8.26489C125.811 7.71714 125.679 7.08016 125.679 6.35393C125.679 5.6277 125.811 4.98764 126.076 4.43374C126.344 3.87676 126.716 3.44287 127.193 3.13207C127.673 2.8182 128.233 2.66126 128.873 2.66126C129.242 2.66126 129.607 2.7228 129.967 2.84589C130.327 2.96898 130.655 3.169 130.95 3.44595C131.246 3.71982 131.481 4.08294 131.656 4.53529C131.832 4.98764 131.919 5.54462 131.919 6.20622V6.66781H126.454V5.72618H130.812C130.812 5.32614 130.732 4.96918 130.572 4.6553C130.415 4.34142 130.19 4.09371 129.898 3.91215C129.608 3.73059 129.267 3.63982 128.873 3.63982C128.439 3.63982 128.064 3.74752 127.747 3.96292C127.433 4.17525 127.191 4.4522 127.022 4.79378C126.853 5.13535 126.768 5.50154 126.768 5.89235V6.5201C126.768 7.05554 126.86 7.50943 127.045 7.88177C127.233 8.25104 127.493 8.53261 127.825 8.72647C128.158 8.91726 128.544 9.01265 128.984 9.01265C129.27 9.01265 129.528 8.97265 129.759 8.89264C129.993 8.80956 130.195 8.68647 130.364 8.52338C130.533 8.35721 130.664 8.15103 130.756 7.90485L131.809 8.20027C131.698 8.55722 131.512 8.8711 131.25 9.1419C130.989 9.40962 130.665 9.61887 130.281 9.76965C129.896 9.91736 129.464 9.99121 128.984 9.99121ZM133.577 9.84351V2.75357H134.629V3.82445H134.703C134.832 3.47365 135.066 3.189 135.404 2.97052C135.743 2.75204 136.124 2.64279 136.549 2.64279C136.629 2.64279 136.729 2.64433 136.849 2.64741C136.969 2.65049 137.06 2.6551 137.121 2.66126V3.76906C137.085 3.75983 137 3.74598 136.868 3.72752C136.738 3.70598 136.601 3.69521 136.457 3.69521C136.112 3.69521 135.804 3.76752 135.534 3.91215C135.266 4.0537 135.054 4.25065 134.897 4.50298C134.743 4.75223 134.666 5.03688 134.666 5.35691V9.84351H133.577ZM139.428 7.25864L139.41 5.91081H139.631L142.733 2.75357H144.081L140.776 6.09544H140.684L139.428 7.25864ZM138.413 9.84351V0.390264H139.502V9.84351H138.413ZM142.918 9.84351L140.148 6.33547L140.924 5.57847L144.303 9.84351H142.918ZM146.572 0.390264V9.84351H145.483V0.390264H146.572ZM151.54 9.99121C150.857 9.99121 150.268 9.84043 149.772 9.53886C149.28 9.23421 148.9 8.80956 148.632 8.26489C148.368 7.71714 148.235 7.08016 148.235 6.35393C148.235 5.6277 148.368 4.98764 148.632 4.43374C148.9 3.87676 149.272 3.44287 149.749 3.13207C150.229 2.8182 150.789 2.66126 151.429 2.66126C151.799 2.66126 152.163 2.7228 152.523 2.84589C152.883 2.96898 153.211 3.169 153.507 3.44595C153.802 3.71982 154.037 4.08294 154.213 4.53529C154.388 4.98764 154.476 5.54462 154.476 6.20622V6.66781H149.011V5.72618H153.368C153.368 5.32614 153.288 4.96918 153.128 4.6553C152.971 4.34142 152.746 4.09371 152.454 3.91215C152.165 3.73059 151.823 3.63982 151.429 3.63982C150.996 3.63982 150.62 3.74752 150.303 3.96292C149.989 4.17525 149.748 4.4522 149.578 4.79378C149.409 5.13535 149.325 5.50154 149.325 5.89235V6.5201C149.325 7.05554 149.417 7.50943 149.602 7.88177C149.789 8.25104 150.049 8.53261 150.382 8.72647C150.714 8.91726 151.1 9.01265 151.54 9.01265C151.826 9.01265 152.085 8.97265 152.316 8.89264C152.55 8.80956 152.751 8.68647 152.92 8.52338C153.09 8.35721 153.22 8.15103 153.313 7.90485L154.365 8.20027C154.254 8.55722 154.068 8.8711 153.807 9.1419C153.545 9.40962 153.222 9.61887 152.837 9.76965C152.453 9.91736 152.02 9.99121 151.54 9.99121Z"
  );
  creatingPaths(
    "M65.832 32.4109C66.5936 32.4109 67.2219 32.5061 67.717 32.6966C68.2163 32.8827 68.5886 33.1683 68.834 33.5534C69.0794 33.9384 69.2021 34.4292 69.2021 35.0258C69.2021 35.5166 69.1133 35.9271 68.9356 36.2571C68.7579 36.5829 68.5251 36.8473 68.2374 37.0504C67.9497 37.2535 67.6429 37.4101 67.3171 37.5201L69.8622 41.6899H68.6055L66.3334 37.8184H64.404V41.6899H63.325V32.4109H65.832ZM65.7685 33.3439H64.404V36.9045H65.8764C66.6338 36.9045 67.1902 36.75 67.5456 36.4412C67.9053 36.1323 68.0851 35.6774 68.0851 35.0766C68.0851 34.4461 67.8947 33.9998 67.5139 33.7374C67.1373 33.4751 66.5555 33.3439 65.7685 33.3439ZM79.3951 37.0378C79.3951 37.7528 79.3041 38.4044 79.1222 38.9926C78.9402 39.5765 78.6694 40.08 78.3098 40.5031C77.9544 40.922 77.5122 41.2457 76.9833 41.4742C76.4544 41.7026 75.8409 41.8169 75.1427 41.8169C74.4234 41.8169 73.7951 41.7026 73.2577 41.4742C72.7246 41.2457 72.2803 40.9199 71.9249 40.4967C71.5737 40.0736 71.3093 39.568 71.1316 38.9799C70.9581 38.3917 70.8713 37.7401 70.8713 37.0251C70.8713 36.0773 71.0279 35.2458 71.341 34.5308C71.6541 33.8157 72.128 33.2593 72.7627 32.8616C73.4016 32.4638 74.2013 32.265 75.1618 32.265C76.0799 32.265 76.8521 32.4617 77.4783 32.8552C78.1088 33.2487 78.5848 33.803 78.9064 34.5181C79.2322 35.2289 79.3951 36.0688 79.3951 37.0378ZM72.0074 37.0378C72.0074 37.8248 72.1195 38.506 72.3438 39.0814C72.568 39.6569 72.9108 40.1011 73.372 40.4142C73.8374 40.7273 74.4277 40.8839 75.1427 40.8839C75.862 40.8839 76.4502 40.7273 76.9071 40.4142C77.3683 40.1011 77.7089 39.6569 77.929 39.0814C78.149 38.506 78.259 37.8248 78.259 37.0378C78.259 35.8403 78.0072 34.9052 77.5037 34.2325C77.0044 33.5555 76.2238 33.217 75.1618 33.217C74.4425 33.217 73.8501 33.3714 73.3847 33.6803C72.9192 33.9892 72.5723 34.4292 72.3438 35.0004C72.1195 35.5674 72.0074 36.2465 72.0074 37.0378ZM89.5118 37.0378C89.5118 37.7528 89.4209 38.4044 89.2389 38.9926C89.057 39.5765 88.7862 40.08 88.4265 40.5031C88.0711 40.922 87.629 41.2457 87.1001 41.4742C86.5712 41.7026 85.9576 41.8169 85.2595 41.8169C84.5402 41.8169 83.9119 41.7026 83.3745 41.4742C82.8414 41.2457 82.3971 40.9199 82.0417 40.4967C81.6905 40.0736 81.426 39.568 81.2483 38.9799C81.0749 38.3917 80.9881 37.7401 80.9881 37.0251C80.9881 36.0773 81.1447 35.2458 81.4578 34.5308C81.7709 33.8157 82.2448 33.2593 82.8795 32.8616C83.5184 32.4638 84.3181 32.265 85.2785 32.265C86.1967 32.265 86.9689 32.4617 87.5951 32.8552C88.2256 33.2487 88.7016 33.803 89.0231 34.5181C89.3489 35.2289 89.5118 36.0688 89.5118 37.0378ZM82.1242 37.0378C82.1242 37.8248 82.2363 38.506 82.4606 39.0814C82.6848 39.6569 83.0275 40.1011 83.4887 40.4142C83.9542 40.7273 84.5444 40.8839 85.2595 40.8839C85.9788 40.8839 86.5669 40.7273 87.0239 40.4142C87.4851 40.1011 87.8257 39.6569 88.0457 39.0814C88.2658 38.506 88.3758 37.8248 88.3758 37.0378C88.3758 35.8403 88.124 34.9052 87.6205 34.2325C87.1212 33.5555 86.3406 33.217 85.2785 33.217C84.5592 33.217 83.9669 33.3714 83.5014 33.6803C83.036 33.9892 82.689 34.4292 82.4606 35.0004C82.2363 35.5674 82.1242 36.2465 82.1242 37.0378ZM94.4306 41.6899H93.3453V33.363H90.4258V32.4109H97.3374V33.363H94.4306V41.6899ZM98.2006 36.2444V35.3876H104.154V36.2444H98.2006ZM98.2006 38.8402V37.9834H104.154V38.8402H98.2006ZM105.43 38.1294C105.43 37.4143 105.497 36.7183 105.633 36.0413C105.772 35.3643 105.984 34.7191 106.267 34.1055C106.551 33.492 106.908 32.9272 107.34 32.4109H108.349C107.736 33.2149 107.274 34.1077 106.965 35.0893C106.657 36.0709 106.502 37.0801 106.502 38.1167C106.502 38.7937 106.57 39.4622 106.705 40.1223C106.845 40.7781 107.05 41.4107 107.321 42.02C107.596 42.6293 107.934 43.2047 108.336 43.7463H107.34C106.908 43.2386 106.551 42.6843 106.267 42.0834C105.984 41.4868 105.772 40.8543 105.633 40.1858C105.497 39.5172 105.43 38.8318 105.43 38.1294ZM117.044 41.6899H115.965V37.317H111.091V41.6899H110.012V32.4109H111.091V36.365H115.965V32.4109H117.044V41.6899ZM125.511 39.5384H124.121V41.6899H123.093V39.5384H118.605V38.6498L123.023 32.3602H124.121V38.5864H125.511V39.5384ZM123.093 38.5864V35.5526C123.093 35.3199 123.095 35.1104 123.099 34.9243C123.103 34.7339 123.11 34.5583 123.118 34.3975C123.127 34.2325 123.133 34.0759 123.137 33.9278C123.146 33.7797 123.152 33.6338 123.156 33.4899H123.105C123.025 33.6591 122.932 33.839 122.826 34.0294C122.725 34.2155 122.621 34.3827 122.515 34.5308L119.653 38.5864H123.093ZM128.081 40.1794L128.164 40.3254C128.088 40.6343 127.99 40.9643 127.872 41.3155C127.758 41.6667 127.631 42.0179 127.491 42.369C127.356 42.7245 127.218 43.0566 127.078 43.3655H126.291C126.38 43.027 126.467 42.6695 126.552 42.2929C126.636 41.9205 126.712 41.5524 126.78 41.1885C126.852 40.8204 126.909 40.4841 126.951 40.1794H128.081ZM137.43 41.6899H136.351V37.317H131.477V41.6899H130.398V32.4109H131.477V36.365H136.351V32.4109H137.43V41.6899ZM142.285 36.0159C142.916 36.0159 143.464 36.1238 143.929 36.3396C144.395 36.5512 144.754 36.86 145.008 37.2662C145.266 37.6724 145.395 38.1654 145.395 38.745C145.395 39.3797 145.258 39.9277 144.983 40.3889C144.708 40.8458 144.312 41.1991 143.796 41.4488C143.28 41.6942 142.662 41.8169 141.943 41.8169C141.46 41.8169 141.012 41.7746 140.597 41.6899C140.182 41.6053 139.833 41.4784 139.55 41.3091V40.3063C139.859 40.4925 140.233 40.6406 140.673 40.7506C141.113 40.8606 141.541 40.9156 141.955 40.9156C142.425 40.9156 142.835 40.8416 143.187 40.6935C143.542 40.5412 143.817 40.3127 144.012 40.008C144.211 39.6992 144.31 39.312 144.31 38.8466C144.31 38.2288 144.12 37.7528 143.739 37.4186C143.362 37.0801 142.766 36.9108 141.949 36.9108C141.687 36.9108 141.399 36.932 141.086 36.9743C140.773 37.0166 140.515 37.0631 140.311 37.1139L139.778 36.7648L140.134 32.4109H144.748V33.3757H141.035L140.8 36.1746C140.961 36.1407 141.168 36.1069 141.422 36.073C141.676 36.035 141.964 36.0159 142.285 36.0159Z"
  );
  creatingPaths(
    "M14.7461 85.9797H13.833V82.2791H9.70801V85.9797H8.79492V78.1272H9.70801V81.4734H13.833V78.1272H14.7461V85.9797ZM21.9111 84.1589H20.7349V85.9797H19.8647V84.1589H16.0674V83.407L19.8057 78.0842H20.7349V83.3533H21.9111V84.1589ZM19.8647 83.3533V80.7859C19.8647 80.5889 19.8665 80.4117 19.8701 80.2542C19.8737 80.093 19.8791 79.9444 19.8862 79.8083C19.8934 79.6687 19.8988 79.5362 19.9023 79.4109C19.9095 79.2856 19.9149 79.162 19.9185 79.0403H19.8755C19.8075 79.1835 19.7287 79.3357 19.6392 79.4968C19.5532 79.6544 19.4655 79.7958 19.376 79.9211L16.9536 83.3533H19.8647ZM22.7437 81.3713V80.6462H27.7817V81.3713H22.7437ZM22.7437 83.5681V82.843H27.7817V83.5681H22.7437ZM38.3037 85.9797H37.3906V82.2791H33.2656V85.9797H32.3525V78.1272H33.2656V81.4734H37.3906V78.1272H38.3037V85.9797ZM45.3882 85.9797L44.4214 83.4875H41.2739L40.3125 85.9797H39.3887L42.4609 78.095H43.2827L46.3335 85.9797H45.3882ZM44.1475 82.6765L43.229 80.2004C43.2075 80.136 43.1717 80.0304 43.1216 79.8835C43.075 79.7367 43.0267 79.5846 42.9766 79.427C42.9264 79.2694 42.8853 79.1423 42.853 79.0457C42.8172 79.1925 42.7778 79.3393 42.7349 79.4861C42.6955 79.6293 42.6561 79.7636 42.6167 79.8889C42.5773 80.0107 42.5433 80.1145 42.5146 80.2004L41.5801 82.6765H44.1475ZM51.855 83.8904C51.855 84.3559 51.7386 84.7533 51.5059 85.0828C51.2767 85.4086 50.9544 85.6575 50.5391 85.8293C50.1237 86.0012 49.6349 86.0872 49.0728 86.0872C48.7756 86.0872 48.4945 86.0728 48.2295 86.0442C47.9645 86.0155 47.721 85.9744 47.499 85.9207C47.277 85.8669 47.0819 85.8007 46.9136 85.7219V84.8464C47.1821 84.9574 47.5098 85.0613 47.8965 85.158C48.2832 85.2511 48.6878 85.2976 49.1104 85.2976C49.5042 85.2976 49.8372 85.2457 50.1094 85.1418C50.3815 85.0344 50.5874 84.8822 50.7271 84.6853C50.8703 84.4848 50.9419 84.2449 50.9419 83.9656C50.9419 83.697 50.8828 83.4732 50.7646 83.2942C50.6465 83.1116 50.4495 82.9469 50.1738 82.8C49.9017 82.6497 49.5293 82.4903 49.0566 82.322C48.7236 82.2039 48.43 82.075 48.1758 81.9353C47.9215 81.7921 47.7085 81.6309 47.5366 81.4519C47.3647 81.2729 47.234 81.0652 47.1445 80.8289C47.0586 80.5925 47.0156 80.3222 47.0156 80.0178C47.0156 79.5989 47.1213 79.2408 47.3325 78.9436C47.5474 78.6428 47.8428 78.4137 48.2188 78.2561C48.5983 78.095 49.0334 78.0144 49.5239 78.0144C49.9429 78.0144 50.3296 78.0538 50.6841 78.1326C51.0422 78.2113 51.3698 78.317 51.667 78.4495L51.3823 79.2336C51.0994 79.1155 50.7987 79.017 50.48 78.9382C50.1649 78.8595 49.839 78.8201 49.5024 78.8201C49.1659 78.8201 48.8812 78.8702 48.6484 78.9705C48.4193 79.0671 48.2438 79.205 48.1221 79.384C48.0003 79.5631 47.9395 79.7761 47.9395 80.0232C47.9395 80.2989 47.9967 80.5281 48.1113 80.7107C48.2295 80.8933 48.4157 81.0562 48.6699 81.1995C48.9277 81.3391 49.2679 81.4859 49.6904 81.6399C50.1523 81.8082 50.5444 81.9872 50.8667 82.177C51.189 82.3632 51.4342 82.5924 51.6025 82.8645C51.7708 83.1331 51.855 83.475 51.855 83.8904ZM59.4121 85.9797H58.499V82.2791H54.374V85.9797H53.4609V78.1272H54.374V81.4734H58.499V78.1272H59.4121V85.9797ZM60.9375 82.9666C60.9375 82.3614 60.9948 81.7724 61.1094 81.1995C61.2275 80.6265 61.4066 80.0805 61.6465 79.5613C61.8864 79.0421 62.189 78.564 62.5542 78.1272H63.4082C62.889 78.8075 62.4987 79.5631 62.2373 80.3938C61.9759 81.2245 61.8452 82.0785 61.8452 82.9558C61.8452 83.5287 61.9025 84.0945 62.0171 84.6531C62.1353 85.2081 62.3089 85.7434 62.5381 86.259C62.7708 86.7747 63.0573 87.2616 63.3975 87.72H62.5542C62.189 87.2903 61.8864 86.8212 61.6465 86.3127C61.4066 85.8079 61.2275 85.2725 61.1094 84.7068C60.9948 84.141 60.9375 83.561 60.9375 82.9666ZM70.7666 85.9797H69.8535V82.2791H65.7285V85.9797H64.8154V78.1272H65.7285V81.4734H69.8535V78.1272H70.7666V85.9797ZM77.5825 82.0427C77.5825 82.6801 77.5342 83.2494 77.4375 83.7507C77.3408 84.252 77.1886 84.6764 76.981 85.0237C76.7733 85.371 76.5047 85.636 76.1753 85.8186C75.8459 85.9976 75.4502 86.0872 74.9883 86.0872C74.4046 86.0872 73.9212 85.9278 73.5381 85.6091C73.1585 85.2904 72.8739 84.8303 72.6841 84.2288C72.4979 83.6236 72.4048 82.8949 72.4048 82.0427C72.4048 81.2048 72.4889 80.4851 72.6572 79.8835C72.8291 79.2784 73.1048 78.8147 73.4844 78.4924C73.8639 78.1666 74.3652 78.0037 74.9883 78.0037C75.5791 78.0037 76.0661 78.1648 76.4492 78.4871C76.8324 78.8057 77.117 79.2677 77.3032 79.8728C77.4894 80.4744 77.5825 81.1977 77.5825 82.0427ZM73.3018 82.0427C73.3018 82.7732 73.3573 83.3819 73.4683 83.8689C73.5793 84.3559 73.7583 84.7211 74.0054 84.9646C74.256 85.2045 74.5837 85.3245 74.9883 85.3245C75.3929 85.3245 75.7188 85.2045 75.9658 84.9646C76.2165 84.7247 76.3973 84.3612 76.5083 83.8743C76.6229 83.3873 76.6802 82.7768 76.6802 82.0427C76.6802 81.323 76.6247 80.7214 76.5137 80.238C76.4027 79.7511 76.2236 79.3858 75.9766 79.1423C75.7295 78.8953 75.4001 78.7717 74.9883 78.7717C74.5765 78.7717 74.2471 78.8953 74 79.1423C73.7529 79.3858 73.5739 79.7511 73.4629 80.238C73.3555 80.7214 73.3018 81.323 73.3018 82.0427ZM80.1069 84.7014L80.1768 84.825C80.1123 85.0863 80.0299 85.3656 79.9297 85.6628C79.833 85.96 79.7256 86.2572 79.6074 86.5544C79.4928 86.8552 79.3765 87.1363 79.2583 87.3977H78.5923C78.6675 87.1112 78.7409 86.8087 78.8125 86.49C78.8841 86.1749 78.9486 85.8634 79.0059 85.5554C79.0667 85.2439 79.1151 84.9592 79.1509 84.7014H80.1069ZM88.0186 85.9797H87.1055V82.2791H82.9805V85.9797H82.0674V78.1272H82.9805V81.4734H87.1055V78.1272H88.0186V85.9797ZM92.9653 85.9797H92.0952V80.4153C92.0952 80.204 92.0952 80.0232 92.0952 79.8728C92.0988 79.7188 92.1024 79.5792 92.106 79.4539C92.1131 79.325 92.1221 79.1943 92.1328 79.0618C92.0218 79.1764 91.918 79.2748 91.8213 79.3572C91.7246 79.436 91.6047 79.5344 91.4614 79.6526L90.5645 80.3723L90.0972 79.7654L92.2241 78.1272H92.9653V85.9797Z"
  );
  creatingPaths(
    "M123.598 85.9797H122.685V82.2791H118.56V85.9797H117.646V78.1272H118.56V81.4734H122.685V78.1272H123.598V85.9797ZM127.707 81.178C128.24 81.178 128.704 81.2693 129.098 81.4519C129.492 81.6309 129.796 81.8923 130.011 82.2361C130.229 82.5798 130.338 82.997 130.338 83.4875C130.338 84.0247 130.222 84.4884 129.989 84.8787C129.757 85.2654 129.422 85.5644 128.985 85.7756C128.548 85.9833 128.025 86.0872 127.417 86.0872C127.008 86.0872 126.629 86.0514 126.278 85.9797C125.927 85.9081 125.632 85.8007 125.392 85.6575V84.8088C125.653 84.9664 125.97 85.0917 126.342 85.1848C126.715 85.2779 127.076 85.3245 127.427 85.3245C127.825 85.3245 128.172 85.2618 128.469 85.1365C128.77 85.0076 129.003 84.8142 129.167 84.5564C129.336 84.295 129.42 83.9674 129.42 83.5735C129.42 83.0507 129.259 82.6479 128.937 82.365C128.618 82.0785 128.113 81.9353 127.422 81.9353C127.2 81.9353 126.956 81.9532 126.691 81.989C126.426 82.0248 126.208 82.0642 126.036 82.1072L125.585 81.8118L125.886 78.1272H129.791V78.9436H126.648L126.45 81.3123C126.586 81.2836 126.761 81.255 126.976 81.2263C127.191 81.1941 127.434 81.178 127.707 81.178ZM131.595 81.3713V80.6462H136.633V81.3713H131.595ZM131.595 83.5681V82.843H136.633V83.5681H131.595ZM147.155 85.9797H146.242V82.2791H142.117V85.9797H141.204V78.1272H142.117V81.4734H146.242V78.1272H147.155V85.9797ZM154.24 85.9797L153.273 83.4875H150.125L149.164 85.9797H148.24L151.312 78.095H152.134L155.185 85.9797H154.24ZM152.999 82.6765L152.081 80.2004C152.059 80.136 152.023 80.0304 151.973 79.8835C151.927 79.7367 151.878 79.5846 151.828 79.427C151.778 79.2694 151.737 79.1423 151.705 79.0457C151.669 79.1925 151.629 79.3393 151.586 79.4861C151.547 79.6293 151.508 79.7636 151.468 79.8889C151.429 80.0107 151.395 80.1145 151.366 80.2004L150.432 82.6765H152.999ZM160.707 83.8904C160.707 84.3559 160.59 84.7533 160.357 85.0828C160.128 85.4086 159.806 85.6575 159.391 85.8293C158.975 86.0012 158.486 86.0872 157.924 86.0872C157.627 86.0872 157.346 86.0728 157.081 86.0442C156.816 86.0155 156.573 85.9744 156.351 85.9207C156.129 85.8669 155.933 85.8007 155.765 85.7219V84.8464C156.034 84.9574 156.361 85.0613 156.748 85.158C157.135 85.2511 157.539 85.2976 157.962 85.2976C158.356 85.2976 158.689 85.2457 158.961 85.1418C159.233 85.0344 159.439 84.8822 159.579 84.6853C159.722 84.4848 159.793 84.2449 159.793 83.9656C159.793 83.697 159.734 83.4732 159.616 83.2942C159.498 83.1116 159.301 82.9469 159.025 82.8C158.753 82.6497 158.381 82.4903 157.908 82.322C157.575 82.2039 157.282 82.075 157.027 81.9353C156.773 81.7921 156.56 81.6309 156.388 81.4519C156.216 81.2729 156.086 81.0652 155.996 80.8289C155.91 80.5925 155.867 80.3222 155.867 80.0178C155.867 79.5989 155.973 79.2408 156.184 78.9436C156.399 78.6428 156.694 78.4137 157.07 78.2561C157.45 78.095 157.885 78.0144 158.375 78.0144C158.794 78.0144 159.181 78.0538 159.536 78.1326C159.894 78.2113 160.221 78.317 160.519 78.4495L160.234 79.2336C159.951 79.1155 159.65 79.017 159.332 78.9382C159.016 78.8595 158.691 78.8201 158.354 78.8201C158.017 78.8201 157.733 78.8702 157.5 78.9705C157.271 79.0671 157.095 79.205 156.974 79.384C156.852 79.5631 156.791 79.7761 156.791 80.0232C156.791 80.2989 156.848 80.5281 156.963 80.7107C157.081 80.8933 157.267 81.0562 157.521 81.1995C157.779 81.3391 158.119 81.4859 158.542 81.6399C159.004 81.8082 159.396 81.9872 159.718 82.177C160.041 82.3632 160.286 82.5924 160.454 82.8645C160.622 83.1331 160.707 83.475 160.707 83.8904ZM168.264 85.9797H167.351V82.2791H163.226V85.9797H162.312V78.1272H163.226V81.4734H167.351V78.1272H168.264V85.9797ZM169.789 82.9666C169.789 82.3614 169.846 81.7724 169.961 81.1995C170.079 80.6265 170.258 80.0805 170.498 79.5613C170.738 79.0421 171.041 78.564 171.406 78.1272H172.26C171.741 78.8075 171.35 79.5631 171.089 80.3938C170.827 81.2245 170.697 82.0785 170.697 82.9558C170.697 83.5287 170.754 84.0945 170.869 84.6531C170.987 85.2081 171.16 85.7434 171.39 86.259C171.622 86.7747 171.909 87.2616 172.249 87.72H171.406C171.041 87.2903 170.738 86.8212 170.498 86.3127C170.258 85.8079 170.079 85.2725 169.961 84.7068C169.846 84.141 169.789 83.561 169.789 82.9666ZM179.618 85.9797H178.705V82.2791H174.58V85.9797H173.667V78.1272H174.58V81.4734H178.705V78.1272H179.618V85.9797ZM186.391 85.9797H181.246V85.2332L183.346 83.1008C183.736 82.7069 184.064 82.356 184.329 82.0481C184.597 81.7402 184.801 81.4376 184.941 81.1404C185.081 80.8396 185.15 80.5102 185.15 80.1521C185.15 79.7081 185.018 79.3697 184.753 79.137C184.492 78.9006 184.146 78.7825 183.716 78.7825C183.34 78.7825 183.007 78.8469 182.717 78.9758C182.427 79.1047 182.13 79.2874 181.826 79.5237L181.348 78.9221C181.555 78.7467 181.781 78.5909 182.024 78.4548C182.271 78.3188 182.535 78.2113 182.814 78.1326C183.097 78.0538 183.398 78.0144 183.716 78.0144C184.2 78.0144 184.617 78.0986 184.968 78.2668C185.319 78.4351 185.589 78.675 185.779 78.9866C185.972 79.2981 186.069 79.6687 186.069 80.0984C186.069 80.5138 185.986 80.9005 185.822 81.2585C185.657 81.613 185.426 81.9657 185.129 82.3167C184.832 82.664 184.484 83.0328 184.087 83.4231L182.379 85.1257V85.1633H186.391V85.9797ZM188.958 84.7014L189.028 84.825C188.964 85.0863 188.882 85.3656 188.781 85.6628C188.685 85.96 188.577 86.2572 188.459 86.5544C188.344 86.8552 188.228 87.1363 188.11 87.3977H187.444C187.519 87.1112 187.592 86.8087 187.664 86.49C187.736 86.1749 187.8 85.8634 187.857 85.5554C187.918 85.2439 187.967 84.9592 188.002 84.7014H188.958ZM196.87 85.9797H195.957V82.2791H191.832V85.9797H190.919V78.1272H191.832V81.4734H195.957V78.1272H196.87V85.9797ZM203.353 79.9587C203.353 80.3097 203.285 80.614 203.149 80.8718C203.013 81.1296 202.823 81.3409 202.58 81.5056C202.336 81.6667 202.05 81.7795 201.72 81.844V81.887C202.343 81.9657 202.811 82.1663 203.122 82.4885C203.437 82.8108 203.595 83.2333 203.595 83.7561C203.595 84.2109 203.487 84.6137 203.272 84.9646C203.061 85.3155 202.735 85.5912 202.295 85.7917C201.858 85.9887 201.298 86.0872 200.614 86.0872C200.198 86.0872 199.813 86.0531 199.459 85.9851C199.108 85.9207 198.771 85.8114 198.449 85.6575V84.8196C198.775 84.9807 199.13 85.1078 199.513 85.2009C199.896 85.2904 200.266 85.3352 200.625 85.3352C201.341 85.3352 201.858 85.1938 202.177 84.9109C202.495 84.6244 202.655 84.2341 202.655 83.74C202.655 83.3998 202.565 83.1259 202.386 82.9182C202.211 82.7069 201.957 82.553 201.624 82.4563C201.294 82.356 200.897 82.3059 200.431 82.3059H199.647V81.5432H200.437C200.863 81.5432 201.224 81.4806 201.521 81.3552C201.819 81.2299 202.044 81.0544 202.198 80.8289C202.356 80.5997 202.435 80.3293 202.435 80.0178C202.435 79.6204 202.302 79.3142 202.037 79.0994C201.772 78.8809 201.412 78.7717 200.958 78.7717C200.678 78.7717 200.424 78.8004 200.195 78.8577C199.966 78.915 199.751 78.9937 199.55 79.094C199.35 79.1943 199.149 79.3106 198.949 79.4431L198.498 78.8308C198.784 78.6088 199.133 78.4172 199.545 78.2561C199.957 78.095 200.424 78.0144 200.947 78.0144C201.749 78.0144 202.35 78.197 202.751 78.5623C203.153 78.9275 203.353 79.393 203.353 79.9587Z"
  );

  function creatingGs(d) {
    const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
    g.setAttribute("style", "mix-blend-mode:multiply");
    svgIcon.appendChild(g);

    const pathg = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "path"
    );
    pathg.setAttribute("d", d);
    pathg.setAttribute("stroke", "#EBEEF7");
    pathg.setAttribute("stroke-width", "0.812388");
    pathg.setAttribute("stroke-miterlimit", "10");
    g.appendChild(pathg);
  }

  creatingGs("M160.436 26.2358H50.0898V47.626H160.436V26.2358Z");
  creatingGs("M101.107 69.9749H0.574219V91.365H101.107V69.9749Z");
  creatingGs("M209.96 69.9749H109.427V91.365H209.96V69.9749Z");
  creatingGs("M160.436 69.4387V59.5356H50.0898V69.4387");
  creatingGs("M105.267 59.0074V48.1702");

  const input1 = createElementWithClasses(
    "input",
    "w-full h-10 bg-[#EBEEF7] border border-[#062680] outline-none text-secondary-300 text-center"
  );
  input1.id = inputId1;
  input1.name = inputId1;
  input1.value = "";
  input1.readOnly = true;
  input1.addEventListener("click", () => onRemoveAlternative(inputId1));
  div3.appendChild(input1);

  const input2 = createElementWithClasses(
    "input",
    "w-full h-10 bg-[#EBEEF7] border border-[#062680] outline-none text-secondary-300 text-center"
  );
  input2.id = inputId2;
  input2.name = inputId2;
  input2.value = "";
  input2.readOnly = true;
  input2.addEventListener("click", () => onRemoveAlternative(inputId2));
  div3.appendChild(input2);

  const secondDiv = createElementWithClasses(
    "div",
    "grid gap-2 text-secondary-300 font-medium h-auto w-full"
  );
  secondDiv.style.gridTemplateColumns = `repeat(${alternativesGridColSize}, minmax(0, 1fr))`;
  form.appendChild(secondDiv);

  alternatives.map((alternative, _) => {
    const button = createElementWithClasses(
      "button",
      "w-full py-3 bg-red-990 hover:bg-secondary-800 border disabled:bg-secondary-overlay-800 border-secondary-300 disabled:text-secondary-overlay-200 disabled:border-secondary-overlay-200"
    );
    button.type = "button";
    button.id = alternative;
    button.innerHTML = alternative;
    button.addEventListener("click", () => onSelectAlternative(alternative));
    // evento para ver se o botão desabilita ou não
    button.addEventListener("disableButton", (e) => {
      if (Object.values(currentAnswer).includes(alternative)) {
        button.disabled = true;
      } else {
        button.disabled = false;
      }
    });
    secondDiv.appendChild(button);
  });

  // botao enviar resposta
  const containerButton = createElementWithClasses(
    "div",
    "flex justify-center items-center w-full w-full mt-6"
  );
  const submitButton = generateButtonEnviarResposta(questionId, "secondary");
  containerButton.appendChild(submitButton);
  submitButton.disabled = true;
  rootContainer.addEventListener("canSubmit", (e) => {
    for (const key in e.detail) {
      currentAnswer[key] = e.detail[key];
    }
    currentCounterRespostas = 0;
    for (const key in currentAnswer) {
      if (currentAnswer[key] !== undefined) {
        currentCounterRespostas += 1;
      }
    }
    if (currentCounterRespostas === counterRespostas) {
      // se todos inputs tem valores
      submitButton.disabled = false;
    } else {
      submitButton.disabled = true;
    }
  });
  form.appendChild(containerButton);

  // HandleSubmit + onSubmit dispara esse evento
  const divContainer = document.getElementById(questionId);
  divContainer.addEventListener("RecieveFeedbacks", (e) => {
    const response = e.detail;

    const feedback = generateFeedBack(
      response[0].feedback.title,
      response[0].feedback.subtitle,
      response[0].isCorrect
    );
    feedback.classList.add("class-feedbacks-remove");

    form.insertBefore(feedback, containerButton);
  });
}

export { generateCompleteImageQuestion };
